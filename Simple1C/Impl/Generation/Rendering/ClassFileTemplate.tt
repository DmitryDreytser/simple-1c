<#@ template language="C#" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using Simple1C.Interface;
using Simple1C.Interface.ObjectModel;

namespace <#=Model.Namespace#>
{
<# 
	PushIndent("\t"); 
	RenderClass(Model.MainClass);
	PopIndent();
#>
}
<#+
public ClassFileModel Model { get; set; }

private void RenderClass(ClassModel model)
{
#>
<#+if(model.ConfigurationScope.HasValue)
{#>
[ConfigurationScope(ConfigurationScope.<#=model.ConfigurationScope.Value.ToString()#>)]
<#+}#>
<#+if(model.Synonym != null)
{#>
[Synonym("<#=model.Synonym#>")]
<#+}#>
<#+if(model.ObjectPresentation != null)
{#>
[ObjectPresentation("<#=model.ObjectPresentation#>")]
<#+}#>
public partial class <#=model.Name#> : Abstract1CEntity
{
<#+for(var i = 0; i < model.Properties.Count; i++)
	{
		var prop = model.Properties[i];
		if(i != 0)
			Write("\r\n");
	#>	private Requisite<<#=prop.Type#>> <#=prop.FieldName#>;
<#+if(prop.MaxLength.HasValue) {#>	[MaxLength(<#=prop.MaxLength.Value#>)]
<#+}#>	public <#=prop.Type#> <#=prop.PropertyName#>
	{
		get { return Controller.GetValue(ref <#=prop.FieldName#>, "<#=prop.PropertyName#>"); }
		set { Controller.SetValue(ref <#=prop.FieldName#>, "<#=prop.PropertyName#>", value); }
	}
<#+}#><#+if(model.NestedClasses != null)
		foreach(var nestedClass in model.NestedClasses)
		{
			Write("\r\n");
			PushIndent("\t");
			RenderClass(nestedClass);
			PopIndent();
		}#>
}
<#+}#>